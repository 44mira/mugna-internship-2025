#+TITLE:     Django notes
#+AUTHOR:    Author
#+DATE:      2025-06-02

* First Django Project
  - ~python manage.py~
    - ~runserver~
      - Possible to pass a ~PORT~
      - or a ~IP:PORT~

  - Django determines the /root/ URLconf by looking at the ~ROOT_URLCONF~
    setting.

** ~views.py~
   - Write handlers
** ~urls.py~
   - Write routers

* Templates
  - Express presentation, not program logic
  - Separate the presentation of a document from its data
  - Double braces for value injection from context ~{{ <variable> }}~
    - Surrounded with percent signs and single brace for code injection ~{% <code> %}~
  - You can set the templates directory in the ~TEMPLATE~ variable in ~settings.py~.
  - Loaded with ~django.template.loader import get_template~
    - or ~django.shortcuts import render~
      - takes in a ~request~, ~template~, and ~context~
    - ~TemplateDoesNotExist~ exception

  1. Create a ~Template~ object
  2. Call ~<template>.render(<context>)~
     - Returns the template as a string

** Syntax
   #+BEGIN_SRC py
   t = Template("Hello {{ name }}") # create wrapped template string
   c = Context({"name": "world"})   # define context/environment

   print(t.render(c))
   #+END_SRC

** Injection
   #+BEGIN_SRC html
   {% if %} {% elif %} {% else %} {% endif %}
   {% for <x> in <xs> %} {% empty %} {% endfor %}
   {% comment <note> %}
   {% cycle <a> <b> <c> %}
   {% include <name> %}
   #+END_SRC

** Filters
   - Transformations applied using pipe ~|~.
     - ~title~
       - Titlecase
     - ~first~
     - ~upper~
     - ~truncatewords:"30"~
     - ~date:"<format>"~

** Custom tags and filters
   - Using the ~{% load filters tags %}~ tag.
   - It needs to be in a Django application.
     - ~templatetags/~ directory
   - Pipes are forwarded as the first argument of a function
     - The filter argument will be the rest

   - Define custom tags with decorator
     ~@register.simple_tag(takes_context=True)~
   - Define custom tags with filter
     ~@register.filter(name="filter_name")~

** Template Inheritance
   - Layouts
   - ~{% extends %}~ must be the first tag in the template

*** Syntax
    #+BEGIN_SRC html
    {% extends <name> %}
    {% block <name> %} {% endblock %}
    {% block.super %}
    #+END_SRC

* CSRF Token
  - Cross site request forgery

* Project vs App
** Project
   - Instance of a certain set of Django apps, plus configuration for those apps
   - Contains settings file
** App
   - Portable set of django functionality
   - For modularization

* Models and Django ORM
  - SQLite
  - /Dumb/ queries are done usually for performance
  - Import a model and then access the ~QuerySet~ containing all using
    ~.objects~ method.

  - Models should be named in singular form

** Fields
   - ~models.CharField~
   - ~models.TextField~
   - ~models.IntegerField~
   - ~models.DecimalField~
   - ~models.FileField~
   - ~models.DateTimeField~
   - ~models.EmailField~
   - ~models.OneToOneField~
   - ~models.ForeignKey~
     - ~related_name~ kwarg is used for accessing
     - One-to-many
   - ~models.ManyToManyField~
     - ~related_name~ kwarg is used for accessing

** Kwargs
   - ~verbose_name~
     - For admin label
   - ~help_text~
     - For admin help text
   - ~max_length~

** Migrations
   - Schema /evolution/ or /mutation/
   - Changing your database version from one version into another
   - We can rollback migrations by using ~python manage.py migrate <app> <id>~

* Forms & Function-based Views

** The ~request~ object
   - ~HttpRequest~

*** Information about URL
    - ~request.path~
      - Full path with leading slash not including the domain
    - ~request.get_host~
      - Host/domain
    - ~request.get_full_path~
      - ~.path~ including the query string (if available)
    - ~request.is_secure~
      - If made via HTTPS.
    - ~request.META~
      - Dictionary containing all available HTTP headers of the request
      - Includes IP address and user agent
    - ~request.GET~
    - ~request.POST~

** ~django.forms~
*** The Form
    #+BEGIN_SRC py
    from django import forms

    class ContactForm(forms.Form):
        subject = forms.CharField(max_length=100)
        message = forms.CharField(widget=forms.Textarea)
        sender = forms.EmailField()
        cc_myself = forms.BooleanField(required=False)

        def clean_sender(self):
            sender = self.cleaned_data.get("sender")
            if sender.split("@")[1] != "mugna.tech":
                raise forms.ValidationError(
                    "Sender should only be from a Mugna Organization."
                )

            return sender
    #+END_SRC
*** The View
    #+BEGIN_SRC py
    from django.http import HttpResponseRedirect

    from django.shortcuts import render
    from .forms import ContactForm

    def contact(request):
        if request.method == "POST":
            form = ContactForm(request.POST)
            if form.is_valid():
                return HttpResponseRedirect("/thanks/")
        else:
            form = ContactForm()
        return render(request, "contact.html", {"form": form})
    #+END_SRC

    - ~.is_bound~ attribute tells whether or not data is bound to it or not
    - ~.is_valid~ attribute tells whether or not data is valid or not
*** The Template
    #+BEGIN_SRC html
    <!DOCTYPE html>
    <html lang="">
      <head>
        <meta charset="UTF-8">
        <title>Contact Us</title>
      </head>
      <body>
        <form method="POST">
          {% csrf_token %}
          {{ form }}
        </form>
      </body>
    </html>
    #+END_SRC
**** Form rendering options
     - ~{{ form.as_table }}~
       - render with ~<tr>~ tags.
     - ~{{ form.as_p }}~
       - render with ~<p>~ tags.
     - ~{{ form.as_ul }}~
       - render with ~<li>~ tags.

* Django Test and Test-driven Development
  - Simulation of requests
  - Insertion of test data
  - Inspection of the application's output
  - Application level testing can be found in ~tests.py~
    - Or within a directory ~tests/~
      - Any filename that begins with ~test_~

** Syntax
   #+BEGIN_SRC py
   from django.test import TestCase

   class BookMethodTests(TestCase):
     def setUp(self):
       pass
   #+END_SRC

   #+BEGIN_SRC bash
   ./manage.py test
   ./manage.py test books
   ./manage.py test books.tests
   ./manage.py test books.tests.BookMethodTests
   ./manage.py test books.tests.BookMethodTests.<testname>
   #+END_SRC

** The Test Client
   - Simulate ~GET~ and ~POST~ requests.
   - Doesn't need the webserver to be running
   - By default CSRF checks are disabled

* Class-Based Views
  - Can use mixins to mak reusable components
  - ~.as_view()~

  #+BEGIN_SRC py
  from django.views.generic import TemplateView, View
  #+END_SRC

** Generic Views
   - ~ListView~
   - ~DetailView~
   - ~CreateView~
   - ~UpdateView~
   - ~DeleteView~

* Sessions
  - Sessions are implemented via /middleware/
  - ~request.session~ dictionary
    - or ~from django.contrib.sessions.backends.db import SessionStore~
  - By default, Django stores sessions in your database
    - can be configured to store in filesystem or cache
    - ~settings.SESSION_ENGINE~
  - ~uv add python-memcached~

